schema {
	query: Query
}

scalar JsonType

type Query {
	# Core
	collection(name: String, filter: JsonType): JsonType
	# Singletons
	maintenanceConfigurationSingleton: MaintenanceConfiguration!
	headerConfigurationSingleton: HeaderConfiguration!
	matomoConfigurationSingleton: MatomoConfiguration!
	marketingBannerSingleton: MarketingBannger!
	livestreamConfigurationSingleton: LivestreamConfiguration!
	# Page Singletons
	homePageSingleton: HomePage!
	blogPageSingleton: BlogPage!
	portraitPageSingleton: PortraitPage!
	partnerPageSingleton: PartnerPage!
	privacyPageSingleton: PrivacyPage!
	discordPageSingleton: DiscordPage!
	# Collections
	teamMembersCollection(filter: JsonType, limit: Int, skip: Int, sort: JsonType): [TeamMember]!
	articlesCollection(filter: JsonType, limit: Int, skip: Int, sort: JsonType): [Article]!
	eventsCollection(filter: JsonType, limit: Int, skip: Int, sort: JsonType): [Event]!
	eventOverviewCollection: [EventOverview]!
	translationsCollection(limit: Int, skip: Int): [Translation]!
	seoCollection(filter: JsonType, limit: Int, skip: Int): [Seo]!
	partnersCollection(filter: JsonType, limit: Int, skip: Int, sort: JsonType): [Partner]!
	guestAppearanceEventsCollection(filter: JsonType, limit: Int, skip: Int, sort: JsonType): [GuestAppearanceEvent]!
	festivalsCollection(filter: JsonType, limit: Int, skip: Int, sort: JsonType): [Festival]!
}

# Cockpit CMS

interface CockpitAssetField {
	_id: String!
}

interface CockpitField {
	_id: String!
	_created: Int!
	_modified: Int!
}

type CockpitAsset implements CockpitAssetField {
	_id: String!
	title: String
	path: String!
	mime: String!
	tags: [String]!
	colors: [String]!
}

type CockpitImage {
	path: String!
}

# Singletons

type MarketingBannger {
	id: String!
	isEnabled: Boolean!
	message: String
	link: String
}

type MaintenanceConfiguration {
	isMaintenanceActive: Boolean!
	title: String
	description: String
}

type LivestreamConfigurationTimeline {
	date: String
	time: String
}

type LivestreamConfiguration {
	isEnabled: Boolean!
	twitchAccount: String
	streamStart: LivestreamConfigurationTimeline
	streamEnd: LivestreamConfigurationTimeline
}

type HeaderConfigurationCta {
	link: String
	title: String
}

type HeaderConfiguration @cacheControl(maxAge: 320) {
	cta: HeaderConfigurationCta
	festivalRedirect: String
}

type MatomoConfiguration @cacheControl(maxAge: 2400) {
	containerId: String!
}

# Page singletons

type HomePageHeroCTA {
	title: String
	link: String
}

type HomePage {
	eventShowcase: Event
	heroTitle: String
	heroText: String
	heroImage: CockpitAsset
	heroPrimaryCta: HomePageHeroCTA
	heroSecondaryCta: HomePageHeroCTA
}

type DiscordPage {
	title: String!
	description: String!
	content: String!
	serverJoinUrl: String!
	widgetEmbedUrl: String!
	isWidgetEnabled: Boolean
	isJoinEnabled: Boolean
}

type BlogPage {
	title: String!
	description: String
}

type PortraitPage {
	title: String!
	description: String
	teamImage: CockpitAsset!
	teamImageDescription: String!
}

type PartnerPage {
	title: String!
	description: String
}

# Collections

enum TeamMemberActivityArea {
	building
	technology
	finance
	administration
	support
	thirdparty
	legal
	communication
}

type TeamMemberLink {
	url: String
	label: String
}

type TeamMemberLinkCollection {
	value: TeamMemberLink
}

input TeamMembersCollectionFilter {
	_id: String
	fullName: String
	primaryActivityArea: TeamMemberActivityArea
	role: String
	isFounder: Boolean
	isActive: Boolean
}

type TeamMember implements CockpitField {
	_id: String!
	_created: Int!
	_modified: Int!
	image: CockpitAsset
	fullName: String!
	slug: String!
	primaryActivityArea: TeamMemberActivityArea!
	role: String
	isFounder: Boolean!
	isActive: Boolean!
	entryDate: String!
	exitDate: String
	bio: String
	favoriteDrink: String
	favoriteGenre: String
	links: [TeamMemberLinkCollection]
}

enum ArticleCategory {
	general
	news
	events
	press
	media
	partners
	about
}

input ArticleFilter {
	_id: String
	category: ArticleCategory
	tags: [String]
}

type Article implements CockpitField {
	_id: String!
	_created: Int!
	_modified: Int!
	slug: String!
	title: String!
	excerpt: String!
	image: CockpitAsset
	author: TeamMember
	readingTime: Int
	content: String
	category: ArticleCategory!
}

enum EventType {
	festival
	cooperation
	daydance
	showcase
}

type Event implements CockpitField {
	_id: String!
	_created: Int!
	_modified: Int!
	slug: String!
	title: String!
	type: EventType
	excerpt: String!
	content: String!
	date: String!
	endDate: String
	location: Location
	ticketingUrl: String
	facebookEventUrl: String
	image: CockpitAsset
	isCanceled: Boolean
}

type TimetableSlot {
	artist: String!
	labels: String!
	playtime: String
}

type TimetableSlots {
	value: JsonType
}

type Timetable implements CockpitField {
	_id: String!
	_created: Int!
	_modified: Int!
	title: String!
	slug_slug: String
	description: String
	slots: [TimetableSlots]
}

type ImpressionAsset {
	value: JsonType
}

type Impression implements CockpitField {
	_id: String!
	_created: Int!
	_modified: Int!
	date: String!
	assets: [ImpressionAsset]
}

type Festival implements CockpitField {
	_id: String!
	_created: Int!
	_modified: Int!
	title: String!
	year: String!
	slug: String!
	introduction: String!
	text: String!
	date: String!
	timetable: Timetable
	endDate: String
	location: Location
	ticketingUrl: String
	facebookEventUrl: String
	image: CockpitAsset
	sponsors: [Partner]
	isCanceled: Boolean
	previewImage: CockpitAsset!
	impressions: Impression
}

# Event Overview

type EventOverview {
	title: String!
	image: CockpitAsset!
	category: EventType!
	cssStyleTransforms: String
}

# Translations

type Translation implements CockpitField {
	_id: String!
	_created: Int!
	_modified: Int!
	key: String!
	Date: String
	value: String
}

# SEO

input SeoCollectionFilter {
	id: String
}

type Seo {
	id: String!
	title: String
	description: String
	keywords: [String]
	image: CockpitAsset
	crawler: String
	author: String
	previewImage: CockpitAsset
}

# Partners

enum PartnerType {
	partner
	supplier
	sponsor
	mainsponsor
}

enum PartnerLevel {
	bronze
	silver
	gold
	platinum
	diamond
}

type Partner {
	title: String!
	slug: String!
	logo: CockpitAsset
	type: PartnerType!
	level: PartnerLevel
	isActive: Boolean!
	role: String!
	homepage: String!
	since: Int!
	left: Int
	backgroundFillColor: String
}

# Locations

type Location {
	name: String!
	city: String!
	address: String
	country: String!
	link: String
	lng: Int
	lat: Int
}

# Guest Appearance
type GuestAppearanceEvent {
	id: String!
	label: String!
	isActive: String!
}

# Privacy

type PrivacyPage {
	content: String!
}
